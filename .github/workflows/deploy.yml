name: CI/CD Pipeline

on:
    push:
        branches: [prod]
    workflow_dispatch:

concurrency:
    group: prod
    cancel-in-progress: true

permissions:
    contents: read
    packages: write

env:
    REGISTRY: ghcr.io
    TAG: ${{ github.sha }}

jobs:
    build:
        runs-on: ubuntu-latest
        outputs:
            tag: ${{ steps.meta.outputs.tag }}
            image: ${{ steps.normalize.outputs.image }}
            digest: ${{ steps.build.outputs.digest }}
        steps:
            - uses: actions/checkout@v4

            - uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - uses: docker/setup-buildx-action@v3

            # centralize metadata/tags
            - id: meta
              run: echo "tag=${TAG}" >> "$GITHUB_OUTPUT"

            # normalize image name to lowercase and expose as output + env
            - id: normalize
              shell: bash
              run: |
                  IMAGE_LC="${REGISTRY}/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')"
                  echo "image=${IMAGE_LC}" >> "$GITHUB_OUTPUT"
                  echo "IMAGE=${IMAGE_LC}" >> "$GITHUB_ENV"

            # Build the CI image and PUSH it so test can pull it
            - id: build
              uses: docker/build-push-action@v6
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ steps.normalize.outputs.image }}:${{ steps.meta.outputs.tag }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    test:
        runs-on: ubuntu-latest
        needs: build
        env:
            IMAGE: ${{ needs.build.outputs.image }}
            TAG: ${{ needs.build.outputs.tag }}
            DIGEST: ${{ needs.build.outputs.digest }}
        steps:
            - uses: actions/checkout@v4

            # login so compose can pull from GHCR
            - uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Pull by digest to verify
              run: docker pull "${IMAGE}@${DIGEST}"

            - name: Pull images (CI)
              run: docker compose -f docker/ci/docker-compose.ci.yml pull

            - name: Verify .env files inside container
              run: |
                  docker compose -f docker/ci/docker-compose.ci.yml run --rm app sh -lc '
                    pwd; ls -la
                    echo "[ci] Looking for .env files in /var/www/html..."
                    ls -l /var/www/html/.env /var/www/html/.env.testing || true
                    [ -f /var/www/html/.env ] && echo "[ci] ✅ .env present" || echo "[ci] ❌ .env missing"
                    [ -f /var/www/html/.env.testing ] && echo "[ci] ✅ .env.testing present" || echo "[ci] ❌ .env.testing missing"
                  '

            - name: Start MySQL (Wait until ready)
              run: docker compose -f docker/ci/docker-compose.ci.yml up -d --wait mysql

            - name: Install dev dependencies (CI)
              run: |
                  docker compose -f docker/ci/docker-compose.ci.yml run --rm app \
                  composer install --no-interaction --prefer-dist --no-progress

            - name: Migrate fresh + seed
              run: |
                  docker compose -f docker/ci/docker-compose.ci.yml run --rm app \
                    php artisan migrate:fresh --seed --force

            - name: Run tests
              run: docker compose -f docker/ci/docker-compose.ci.yml run --rm app php artisan test

            - name: MySQL logs (on failure)
              if: failure()
              run: docker compose -f docker/ci/docker-compose.ci.yml logs --no-color mysql

            - name: Tear down
              if: always()
              run: docker compose -f docker/ci/docker-compose.ci.yml down -v

    promote: # retag the tested digest; no rebuild
        runs-on: ubuntu-latest
        needs: [build, test]
        steps:
            - uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Promote tested image
              run: |
                  IMAGE="${{ needs.build.outputs.image }}"
                  DIGEST="${{ needs.build.outputs.digest }}"
                  SHA_TAG="${{ needs.build.outputs.tag }}"

                  docker buildx imagetools create \
                    -t "$IMAGE:$SHA_TAG" \
                    -t "$IMAGE:prod-latest" \
                    "$IMAGE@$DIGEST"

    deploy:
        runs-on: ubuntu-latest
        needs: promote
        environment:
            name: production
            url: https://spotacus.app
        steps:
            - uses: actions/checkout@v4

            - name: Prepare known_hosts (EC2)
              run: |
                  mkdir -p ~/.ssh && chmod 700 ~/.ssh
                  echo "${{ secrets.EC2_HOST_KEY }}" >> ~/.ssh/known_hosts
                  chmod 644 ~/.ssh/known_hosts

            - name: Deploy via SSH
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.EC2_SSH_KEY }}
                  script: |
                      set -euo pipefail
                      cd /var/www/spotacus

                      echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin || true

                      git fetch origin
                      git reset --hard origin/prod

                      docker compose --env-file docker/.env.prod -f docker/compose.prod.yml pull
                      docker compose --env-file docker/.env.prod -f docker/compose.prod.yml up -d --remove-orphans

                      chmod +x deploy/post_deploy.sh
                      ./deploy/post_deploy.sh

            - name: Mark deployment as inactive
              run: |
                  curl -X POST \
                    -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Accept: application/vnd.github+json" \
                    https://api.github.com/repos/${{ github.repository }}/deployments/${{ github.run_id }}/statuses \
                    -d '{"state":"inactive"}'
