services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: spotter-prod
    restart: unless-stopped
    environment:
      APP_ENV: production
      APP_DEBUG: ${APP_DEBUG}
      APP_KEY: ${APP_KEY}
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./storage:/var/www/html/storage
      # unified path so nginx sees the same files; volume seeds from image on first run
      - public-build:/var/www/html/public
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - appnet
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
    volumes:
      - public-build:/var/www/html/public:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/letsencrypt:/etc/letsencrypt:ro
      - certbot-htdocs:/var/www/certbot
    depends_on:
      - app
    networks:
      - appnet
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  mysql:
    image: mysql:8
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-log-bin
    volumes:
      - mysql-prod-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-p${DB_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - appnet
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/letsencrypt:/etc/letsencrypt
      - certbot-htdocs:/var/www/certbot
    entrypoint: ""
    command: sleep infinity
    profiles: [ "certbot" ]

  # OPTIONAL: automatic renewer (keeps renewing twice/day and reloads nginx)
  certbot-renewer:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./certbot/letsencrypt:/etc/letsencrypt
      - certbot-htdocs:/var/www/certbot
    entrypoint: /bin/sh
    command: -lc '
      while :; do
        certbot renew --deploy-hook "sh -lc '\''docker compose exec -T nginx nginx -s reload || true'\''";
        sleep 12h;
      done'
    profiles: ["certbot"]

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - appnet
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

networks:
  appnet: {}

volumes:
  mysql-prod-data:
  certbot-htdocs:
  public-build:
