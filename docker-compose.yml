services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: spotter-prod
    restart: unless-stopped
    environment:
      APP_ENV: production
      APP_DEBUG: ${APP_DEBUG}
      APP_KEY: ${APP_KEY}
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./storage:/var/www/html/storage
      - ./public:/var/www/html/public
    depends_on:
      - mysql
    networks:
      - appnet

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./public:/var/www/html/public:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - certbot-htdocs:/var/www/certbot
      - certbot-etc:/etc/letsencrypt:ro
    depends_on:
      - app
    networks:
      - appnet

  mysql:
    image: mysql:8
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql-prod-data:/var/lib/mysql
    networks:
      - appnet
  node:
    image: node:20
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
    command: >
      sh -c "npm install --omit=dev && npm run build"

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-htdocs:/var/www/certbot
      - certbot-etc:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'sleep 1000'"

networks:
  appnet:


volumes:
  mysql-prod-data:
  certbot-htdocs:
  certbot-etc:
