# ---------- Stage 1: vendor (Composer deps incl. dev) ----------
FROM composer:2 AS vendor
WORKDIR /var/www/html
ENV COMPOSER_ALLOW_SUPERUSER=1

# Copy only composer files first for better caching
COPY composer.json composer.lock ./
RUN composer install --prefer-dist --no-interaction --no-progress --no-scripts

# Copy the rest of the app
COPY . .

# ---------- Stage 2: Frontend build (Vite/Vue) ----------
FROM node:20 AS build-assets
WORKDIR /var/www/html

# vendor/ must be present for Ziggy or mix-manifests
COPY --from=vendor /var/www/html/vendor ./vendor

# Install frontend deps with lockfile
COPY package*.json ./
RUN npm ci

# Build assets
COPY . .
RUN npm run build

# ---------- Stage 3: PHP CLI runtime for tests ----------
FROM php:8.3-cli
WORKDIR /var/www/html
ENV DEBIAN_FRONTEND=noninteractive

# System deps + php extensions
RUN apt-get update && apt-get install -y --no-install-recommends \
    git zip unzip libxml2-dev libzip-dev libonig-dev \
    && docker-php-ext-install pdo_mysql mbstring zip exif pcntl bcmath \
    && rm -rf /var/lib/apt/lists/*

# Copy full app with vendor + built assets
COPY --from=vendor --chown=www-data:www-data /var/www/html /var/www/html
COPY --from=build-assets --chown=www-data:www-data /var/www/html/public/build /var/www/html/public/build

# ðŸ’¥ ensure .env paths are NOT directories, then create files
COPY docker/ci/.env.ci .env
COPY docker/ci/.env.ci .env.testing
RUN chmod 644 .env .env.testing

# Ensure writable dirs for Laravel
RUN mkdir -p storage bootstrap/cache && \
    chown -R www-data:www-data storage bootstrap/cache

# Default command: show PHP version (override in CI job)
CMD ["php", "-v"]
